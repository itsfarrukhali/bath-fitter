generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  fullName    String
  email       String    @unique
  phoneNumber String
  postalCode  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  projects    Project[]
}

model Admin {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id         String   @id @default(uuid())
  userId     String
  name       String
  selections Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model ProjectType {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  showerTypes ShowerType[]
}

model ShowerType {
  id            Int          @id @default(autoincrement())
  name          String
  slug          String       @unique
  projectTypeId Int
  baseImage     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  categories    Category[]
  projectType   ProjectType  @relation(fields: [projectTypeId], references: [id])
  userDesigns   UserDesign[]
}

model TemplateCategory {
  id                    Int                   @id @default(autoincrement())
  name                  String
  slug                  String                @unique
  description           String?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now()) @updatedAt
  categories            Category[]
  templateProducts      TemplateProduct[]
  templateSubcategories TemplateSubcategory[]
}

model TemplateSubcategory {
  id                 Int               @id @default(autoincrement())
  name               String
  slug               String
  description        String?
  templateCategoryId Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  subcategories      Subcategory[]
  templateProducts   TemplateProduct[]
  templateCategory   TemplateCategory  @relation(fields: [templateCategoryId], references: [id])

  @@unique([templateCategoryId, slug])
}

model TemplateProduct {
  id                    Int                  @id @default(autoincrement())
  name                  String
  slug                  String
  description           String?
  templateCategoryId    Int?
  templateSubcategoryId Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt
  thumbnailUrl          String?
  products              Product[]
  templateCategory      TemplateCategory?    @relation(fields: [templateCategoryId], references: [id])
  templateSubcategory   TemplateSubcategory? @relation(fields: [templateSubcategoryId], references: [id])
  templateVariants      TemplateVariant[]
}

model TemplateVariant {
  id                Int              @id @default(autoincrement())
  colorName         String
  colorCode         String?
  templateProductId Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  imageUrl          String
  publicId          String?
  ProductVariant    ProductVariant[]
  templateProduct   TemplateProduct  @relation(fields: [templateProductId], references: [id])
}

model Category {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String
  hasSubcategories Boolean           @default(false)
  showerTypeId     Int
  createdAt        DateTime          @default(now())
  templateId       Int?
  updatedAt        DateTime          @default(now()) @updatedAt
  z_index          Int?              @default(50)
  showerType       ShowerType        @relation(fields: [showerTypeId], references: [id])
  template         TemplateCategory? @relation(fields: [templateId], references: [id])
  products         Product[]
  subcategories    Subcategory[]

  @@unique([showerTypeId, slug])
}

model Subcategory {
  id         Int                  @id @default(autoincrement())
  name       String
  slug       String
  categoryId Int
  createdAt  DateTime             @default(now())
  templateId Int?
  updatedAt  DateTime             @default(now()) @updatedAt
  z_index    Int?                 @default(50)
  products   Product[]
  category   Category             @relation(fields: [categoryId], references: [id])
  template   TemplateSubcategory? @relation(fields: [templateId], references: [id])

  @@unique([categoryId, slug])
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  categoryId    Int
  subcategoryId Int?
  createdAt     DateTime         @default(now())
  slug          String
  templateId    Int?
  updatedAt     DateTime         @default(now()) @updatedAt
  description   String?
  thumbnailUrl  String?
  z_index       Int?             @default(50)
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  template      TemplateProduct? @relation(fields: [templateId], references: [id])
  variants      ProductVariant[]

  @@unique([categoryId, slug])
  @@unique([subcategoryId, slug])
}

model ProductVariant {
  id                Int              @id @default(autoincrement())
  colorName         String
  colorCode         String?
  imageUrl          String
  productId         Int
  createdAt         DateTime         @default(now())
  templateVariantId Int?
  updatedAt         DateTime         @default(now()) @updatedAt
  publicId          String?
  product           Product          @relation(fields: [productId], references: [id])
  templateVariant   TemplateVariant? @relation(fields: [templateVariantId], references: [id])
}

model UserDesign {
  id             Int        @id @default(autoincrement())
  userFullName   String?
  userEmail      String?
  userPhone      String?
  userPostalCode String?
  designData     Json
  showerTypeId   Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  showerType     ShowerType @relation(fields: [showerTypeId], references: [id])
}
