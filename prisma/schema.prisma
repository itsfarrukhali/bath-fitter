// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  fullName    String
  email       String    @unique
  phoneNumber String
  postalCode  String
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  username  String   @unique
  password  String // hashed (bcrypt)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  selections Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ProjectType {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  showerTypes ShowerType[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model ShowerType {
  id            Int          @id @default(autoincrement())
  name          String
  slug          String       @unique
  projectType   ProjectType  @relation(fields: [projectTypeId], references: [id])
  projectTypeId Int
  baseImage     String?
  categories    Category[]
  userDesigns   UserDesign[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

// TEMPLATE SYSTEM STARTS HERE
model TemplateCategory {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String
  description String?
  isActive    Boolean @default(true)

  // Template hierarchy
  templateSubcategories TemplateSubcategory[]
  templateProducts      TemplateProduct[]

  // Real instances created from this template
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([slug])
}

model TemplateSubcategory {
  id                 Int               @id @default(autoincrement())
  name               String
  slug               String
  description        String?
  templateCategory   TemplateCategory  @relation(fields: [templateCategoryId], references: [id])
  templateCategoryId Int
  templateProducts   TemplateProduct[]
  subcategories      Subcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([templateCategoryId, slug])
}

model TemplateProduct {
  id                    Int     @id @default(autoincrement())
  name                  String
  slug                  String
  description           String?
  thumbnailUrl          String? // Product thumbnail from admin
  templateCategoryId    Int?
  templateSubcategoryId Int?

  // Can belong to either template category or subcategory
  templateCategory    TemplateCategory?    @relation(fields: [templateCategoryId], references: [id])
  templateSubcategory TemplateSubcategory? @relation(fields: [templateSubcategoryId], references: [id])

  // Template variants (common across all instances)
  templateVariants TemplateVariant[]

  // Real product instances
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TemplateVariant {
  id                Int             @id @default(autoincrement())
  colorName         String
  colorCode         String?
  imageUrl          String
  publicId          String?
  templateProduct   TemplateProduct @relation(fields: [templateProductId], references: [id])
  templateProductId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  ProductVariant ProductVariant[]
}

// REAL INSTANCE MODELS
model Category {
  id               Int     @id @default(autoincrement())
  name             String
  slug             String
  hasSubcategories Boolean @default(false)

  // Template reference
  templateId Int?
  template   TemplateCategory? @relation(fields: [templateId], references: [id])

  // Shower type specific
  showerType   ShowerType @relation(fields: [showerTypeId], references: [id])
  showerTypeId Int

  // Instance specific data
  subcategories Subcategory[]
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([showerTypeId, slug])
}

model Subcategory {
  id   Int    @id @default(autoincrement())
  name String
  slug String

  // Template reference
  templateId Int?
  template   TemplateSubcategory? @relation(fields: [templateId], references: [id])

  // Category relationship
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // Instance specific
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([categoryId, slug])
}

model Product {
  id   Int    @id @default(autoincrement())
  name String
  slug String

  // Template reference
  templateId Int?
  template   TemplateProduct? @relation(fields: [templateId], references: [id])

  // Relationships
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    Int
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?

  // Instance specific variants (can override template variants)
  variants ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([categoryId, slug])
  @@unique([subcategoryId, slug])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  colorName String
  colorCode String?
  imageUrl  String

  // Can override template variant image
  templateVariantId Int?
  templateVariant   TemplateVariant? @relation(fields: [templateVariantId], references: [id])

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserDesign {
  id             Int        @id @default(autoincrement())
  userFullName   String?
  userEmail      String?
  userPhone      String?
  userPostalCode String?
  designData     Json
  showerType     ShowerType @relation(fields: [showerTypeId], references: [id])
  showerTypeId   Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
}
